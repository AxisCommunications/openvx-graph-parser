
"""Module for generating the header file for the graph definition C-file

"""

from datetime import datetime


def create_userdata_struct(graphparser):
    """ Create a custom userdata struct for graph create arguments, e.g. reference size """
    parsed_string = ""

    if graphparser.userdata.has_userdata:
        parsed_string += """
typedef struct {
"""
        attributes = graphparser.userdata.attributes
        for attribute in attributes:
            parsed_string += """\
    %s %s;
""" % (attributes[attribute], attribute)

        parsed_string += "} %s_userdata_t;\n" % (graphparser.graphname)

    return parsed_string

def parse_strip_mode(graphparser):
    """Write the header file if strip mode."""

    graphname = graphparser.graphname
    graphname_strip = graphname + "_strip"
    num_input_imgs = len(graphparser.image_nodes.input_nodes_indexed_names)
    num_output_imgs = len(graphparser.image_nodes.output_nodes_indexed_names)

    parsed_string = """\
/* WARNING: DO NOT EDIT THIS FILE MANUALLY!
            THIS FILE IS AUTO-GENERATED AND ANY CHANGES
            WILL BE OVERWRITTEN IF FILE IS RE-GENERATED. */
/**
 *  @file   %s.h
 *  @author HAL 9000
 *  @brief  Autogenerated OpenVX graph skeleton setup code.
 *
 *  Generated %s
 */

#ifndef %s_H
#define %s_H

#include <stdbool.h>
#include <VX/vx.h>
%s
""" % (graphname_strip, datetime.now().strftime('%c'), graphname.upper(), graphname.upper(), create_userdata_struct(graphparser))

    if graphparser.strip_io:
        input_index_lists = graphparser.function_nodes.get_index_lists_for_io_function_nodes('input',
                                                                                              graphparser.image_nodes)
        num_input_nodes = len(set(input_index_lists.function_nodes_index_list))
        output_index_lists = graphparser.function_nodes.get_index_lists_for_io_function_nodes('output',
                                                                                              graphparser.image_nodes)
        num_output_nodes = len(set(output_index_lists.function_nodes_index_list))
        parsed_string += """
typedef struct {
    vx_node input_nodes[%s];
    vx_node output_nodes[%s];
} %s_io_nodes_t;
""" % (num_input_nodes, num_output_nodes, graphname_strip)

        parsed_string += """
/**
 *  Call this to create the nodes etc.
 */
bool
%s_create(vx_context context, vx_graph graph_skeleton, vx_image input_images[%s], vx_image output_images[%s], void *userdata, %s_io_nodes_t *io_nodes);
""" % (graphname, num_input_imgs, num_output_imgs, graphname_strip)

        parsed_string += """
bool
%s_io_set_imgs(vx_image input_images[%s], vx_image output_images[%s], %s_io_nodes_t *io_nodes);
""" % (graphname_strip, num_input_imgs, num_output_imgs, graphname_strip)
    else:
        parsed_string += """
/**
 *  Call this to create the nodes etc.
 */
bool
%s_create(vx_context context, vx_graph graph_skeleton, vx_image input_images[%s], vx_image output_images[%s], void *userdata);
""" % (graphname, num_input_imgs, num_output_imgs)

    parsed_string += "#endif /* " + graphname.upper() + "_H */\n"

    return parsed_string


def parse(graphparser):
    """Write the header file."""

    # Special function if strip_mode
    if graphparser.strip_mode:
        return parse_strip_mode(graphparser)

    graphname = graphparser.graphname

    parsed_string = """\
/* WARNING: DO NOT EDIT THIS FILE MANUALLY!
            THIS FILE IS AUTO-GENERATED AND ANY CHANGES
            WILL BE OVERWRITTEN IF FILE IS RE-GENERATED. */
/**
 *  @file   %s.h
 *  @author HAL 9000
 *  @brief  Autogenerated OpenVX graph skeleton setup code.
 *
 *  Generated %s
 */

/**
 *  @mainpage %s - Graph registration, skeleton creation and IO image handling
 *  @section Design
 *  The Python parser sees the number of inputs per node and generates these setters with proper indexing.
 *  It also knows the size of the array of nodes constructed in %s_create.
 *  Thus hardcoded here by the parser upon autogeneration
 *  OBS:: The graph manager does not have to store the setup structure of the different number of nodes for each input/output image.
 *  This is the task of the parser, and should result in such hardcoded code as below...
 */

#ifndef %s_H
#define %s_H

#include <VX/vx.h>
#include <vision/graphmanager.h>
%s
/**
 *  The graph registration function.
 *  Must have the same name as the filename.
 */
bool
%s(graphmanager_t *graph_manager, io_param_t *io_param, void *userdata);

/**
 *  Called by graphmanager_graph_skeleton_create.
 */
bool
%s_create(graphmanager_t *graph_manager, graphmanager_nodes_t *nodes, io_param_t *io_param, void *userdata);

/**
 *  Updates image buffers on to the previously created graph skeleton.
 */
bool
%s_update_io_images(graphmanager_t *graph_manager, io_param_t *io_param);

""" % (graphname, datetime.now().strftime('%c'), graphname, graphname, graphname.upper(), graphname.upper(),
       create_userdata_struct(graphparser),
       graphname, graphname, graphname)

    if len(graphparser.image_nodes.debug_nodes_indexed_names) > 0:
        parsed_string += "bool\n"
        parsed_string += graphname + "_set_debug_images(graphmanager_t *graph_manager, debug_param_t *debug_param);\n\n"


    parsed_string += "#endif /* " + graphname.upper() + "_H */\n"

    return parsed_string
